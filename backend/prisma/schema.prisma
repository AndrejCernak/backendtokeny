// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  client
  admin
}

/**
 * Pou≈æ√≠vateƒæ ‚Äì ID m√¥≈æe by≈• rovno Clerk userId (napr. "user_abc...").
 * Ak pou≈æ√≠vate vlastn√Ω syst√©m, staƒç√≠ ID ulo≈æi≈• sem.
 */
model User {
  id            String         @id
  createdAt     DateTime       @default(now())
  role          UserRole       @default(client)   // üëà pridan√©


  tokenBalance  TokenBalance?
  transactions  Transaction[]
  callSessionsAsCaller CallSession[] @relation("CallerSessions")
  callSessionsAsCallee CallSession[] @relation("CalleeSessions")
}

/**
 * Zostatok tokenov v sekund√°ch (centr√°lny zdroj pravdy pre ‚Äûm√¥≈æem/nesmiem vola≈•‚Äú).
 */
model TokenBalance {
  userId           String   @id
  secondsRemaining Int      @default(0)
  updatedAt        DateTime @updatedAt

  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/**
 * Finanƒçno-kreditn√© pohyby:
 * - purchase     (+seconds, +amount)
 * - call_debit   (-seconds, amount 0 ‚Äì cenu si poƒç√≠tame na konci hovoru / sum√°rne)
 * - adjustment   ruƒçn√© korekcie (+/- seconds)
 * - refund       vr√°tenie kreditu (z√°porn√Ω amount, kladne seconds)
 */
model Transaction {
  id           String           @id @default(cuid())
  userId       String
  type         TransactionType
  amountEur    Decimal          @db.Decimal(10, 2) @default(0) // sum√°r v ‚Ç¨
  secondsDelta Int              @default(0)                      // + pri n√°kupe, - pri debite
  note         String?
  createdAt    DateTime         @default(now())

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
}

enum TransactionType {
  purchase
  call_debit
  adjustment
  refund
}

/**
 * Log hovorov ‚Äì prehƒæad, koƒæko sa re√°lne minulo a za koƒæko ‚Ç¨.
 * secondsBilled a priceEur si vie≈° dopoƒç√≠ta≈• pri ukonƒçen√≠ hovoru.
 */
model CallSession {
  id            String      @id @default(cuid())
  // ‚ùó urob√≠me ich voliteƒæn√©, aby SetNull d√°val zmysel
  callerId      String?     
  calleeId      String?
  startedAt     DateTime    @default(now())
  endedAt       DateTime?
  status        CallStatus  @default(active)

  secondsBilled Int         @default(0)
  priceEur      Decimal     @db.Decimal(10, 2) @default(0)

  // vz≈•ahy m√¥≈æu zosta≈• s onDelete: SetNull
  caller        User?       @relation("CallerSessions", fields: [callerId], references: [id], onDelete: SetNull)
  callee        User?       @relation("CalleeSessions", fields: [calleeId], references: [id], onDelete: SetNull)

  @@index([callerId, startedAt])
  @@index([calleeId, startedAt])
  @@index([status, startedAt])
}


enum CallStatus {
  active
  ended
  aborted
  no_tokens
}
